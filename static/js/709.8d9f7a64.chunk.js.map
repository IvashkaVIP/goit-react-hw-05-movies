{"version":3,"file":"static/js/709.8d9f7a64.chunk.js","mappings":"uRAEaA,EAAU,mCACjBC,EAAW,gCACXC,EAAqB,gBACrBC,EAAmB,eAElB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+FACQC,EAAAA,EAAAA,GAAM,GAAD,OAAIJ,GAAJ,OAAeC,EAAf,uBAAgDF,IAD7D,0GAIA,SAAeM,EAAtB,kC,aAAO,O,oBAAA,WAAgCC,GAAhC,kFACUF,EAAAA,EAAAA,GAAM,GAAD,OACbJ,GADa,OACFE,EADE,oBAC0BH,EAD1B,kBAC2CO,IAF1D,0GAOA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAiCC,GAAjC,kFACQJ,EAAAA,EAAAA,GAAM,GAAD,OACbJ,EADa,iBACIQ,EADJ,oBACkBT,IAF/B,0GAOA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAA6BD,GAA7B,kFACQJ,EAAAA,EAAAA,GAAM,GAAD,OAAIJ,EAAJ,iBAAqBQ,EAArB,4BAA2CT,IADxD,0G,oFCPP,EAduB,SAAC,GAAyB,IAAvBW,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMH,EAAS,EAATA,GAC7BI,GAAWC,EAAAA,EAAAA,MACXC,EACkB,MAAtBF,EAASG,SAAmB,SAAWH,EAASG,SACpD,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,EAAL,YAAoBN,GAAMS,MAAO,CAAEC,KAAMN,GAAjD,gBACGF,QADH,IACGA,EAAAA,EAASC,KAKjB,ECDD,EAZmB,SAAC,GAAD,IAAGQ,EAAH,EAAGA,OAAH,OACf,wBACKA,EAAOC,KAAI,SAAAC,GAAK,OACb,SAAC,EAAD,CAEIX,MAAOW,EAAMX,MACbC,KAAMU,EAAMV,KACZH,GAAIa,EAAMb,IAHLa,EAAMb,GAFF,KAFN,C,8ICanB,EAhBmB,SAAC,GAAkD,IAAjDc,EAAgD,EAAhDA,aAAcC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,gBAS5C,OAAO,kBAAMC,SARQ,SAAAC,GACjBA,EAAIC,iBACJL,EAAaC,EAChB,EAKM,WACH,kBAAOK,KAAK,OAAOC,MAAON,EAAaO,SALpB,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAChCL,EAAgB,CAAEQ,OAAQH,GAC3B,KAIC,mBAAQD,KAAK,SAAb,sBAGP,E,SC2BD,EAnCe,WAAO,IAAD,EACnB,GAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAee,EAAf,KACA,GAAsCD,EAAAA,EAAAA,WAAS,GAA/C,eAAOE,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBd,EAArB,KACMD,EAAW,UAAGe,EAAaC,IAAI,iBAApB,QAAiC,IAClDC,EAAAA,EAAAA,YAAU,YACPjB,GAAeC,EAAgB,CAAC,EAClC,GAAE,CAACD,EAAaC,IAEjB,IAAMF,EAAY,mCAAG,WAAMhB,GAAN,iGAEED,EAAAA,EAAAA,IAAiBC,GAFnB,OAEXmC,EAFW,OAGjBP,EAAUO,EAAKC,KAAKC,SACfxB,EAAOyB,OACPR,GAAe,GADAA,GAAe,GAJlB,gDAOjBS,QAAQC,IAAR,MAPiB,yDAAH,sDAUlB,OACE,4BACE,oDACA,SAAC,EAAD,CACExB,aAAcA,EACdC,YAAaA,EACbC,gBAAiBA,IAElBL,IAAU,SAAC4B,EAAA,EAAD,CAAY5B,OAAQA,IAC9BgB,IACC,iEAIP,C","sources":["apiService/Api.js","components/MovesListItem/MovesListItem.js","components/MoviesList/MoviesList.js","components/SearchForm/SearchForm.js","pages/movies.js"],"sourcesContent":["import axios from 'axios';\n\nexport const API_KEY = '9d709850c7590845ffb60644b29d6f51';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TRENDING_END_POINT = 'trending/all/';\nconst SEARCH_END_POINT = 'search/movie';\n\nexport async function getMoviesTrending() {\n  return await axios(`${BASE_URL}${TRENDING_END_POINT}day?api_key=${API_KEY}`);\n}\n\nexport async function getMoviesByQuery(query) {\n    return await axios(\n      `${BASE_URL}${SEARCH_END_POINT}?api_key=${API_KEY}&query=${query}`\n    );\n}\n\n// https://api.themoviedb.org/3/movie/{movie_id}\nexport async function getMoviesDetails (id) {\n  return await axios(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}`\n  );\n}\n\n//https://api.themoviedb.org/3/movie/{movie_id}/credits\nexport async function getMoviesCast(id) {\n  return await axios(`${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`);\n}\n","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nconst MoviesListItem = ({ title, name, id }) => {\n    const location = useLocation();\n    const currentPage =\n      location.pathname === '/' ? 'movies' : location.pathname;\n  return (\n    <li>\n      <Link to={`${currentPage}/${id}`} state={{ from: location }}>\n        {title ?? name}\n      </Link>\n    </li>\n  );\n    \n}\n\nexport default MoviesListItem;\n\nMoviesListItem.propTypes = {\n  title: PropTypes.string,\n  name: PropTypes.string,\n  id: PropTypes.number.isRequired,\n};","import PropTypes from 'prop-types';\nimport MoviesListItem from 'components/MovesListItem/MovesListItem';\n\nconst MoviesList = ({ movies }) => (\n    <ul>\n        {movies.map(movie => (\n            <MoviesListItem\n                key={movie.id}\n                title={movie.title}\n                name={movie.name}\n                id={movie.id} />\n        ))}\n    </ul>\n);\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.array,\n};\n","const SearchForm = ({handleSearch, searchValue, setSearchParams}) => {\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        handleSearch(searchValue);\n    };\n      const handleChange = ({ target: { value } }) => {\n        setSearchParams({ search: value });\n      };\n     \n    return <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={searchValue} onChange={handleChange} />\n        <button type='submit'>Search</button>\n      </form>;\n\n}\n\nexport default SearchForm;","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'apiService/Api';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [imgNotFound, setImgNotFound] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchValue = searchParams.get('search') ?? '';\n  useEffect(() => {\n    !searchValue && setSearchParams({});\n  }, [searchValue, setSearchParams]);\n\n  const handleSearch = async query => {\n    try {\n      const resp = await getMoviesByQuery(query);\n      setMovies(resp.data.results);\n      if (!movies.length) setImgNotFound(false);\n      else setImgNotFound(true);\n    } catch (er) {\n      console.log(er);\n    }\n  };\n  return (\n    <div>\n      <h2>Movies, find for Query</h2>\n      <SearchForm\n        handleSearch={handleSearch}\n        searchValue={searchValue}\n        setSearchParams={setSearchParams}\n      />\n      {movies && <MoviesList movies={movies} />}\n      {imgNotFound && (\n        <h2>nothing was found for your request</h2>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","BASE_URL","TRENDING_END_POINT","SEARCH_END_POINT","getMoviesTrending","axios","getMoviesByQuery","query","getMoviesDetails","id","getMoviesCast","title","name","location","useLocation","currentPage","pathname","to","state","from","movies","map","movie","handleSearch","searchValue","setSearchParams","onSubmit","evt","preventDefault","type","value","onChange","target","search","useState","setMovies","imgNotFound","setImgNotFound","useSearchParams","searchParams","get","useEffect","resp","data","results","length","console","log","MoviesList"],"sourceRoot":""}